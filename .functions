# `a` with no arguments opens the current directory in VS Code Editor, otherwise
# opens the given location
function a() {
	if [ $# -eq 0 ]; then
		code .
	else
		code "$@"
	fi
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .
	else
		open "$@"
	fi
}

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_"
}

# Create a new bootstrapped application
function createapp() {
	git clone https://github.com/atkinchris/application-bootstrap.git "$@" && \
	cd "$_" && \
	rm -rf .git && \
	git init
}

# Clean Docker containers, images and volumes
function dockerclean() {
	docker rm $(docker ps -a -q)
	docker rmi $(docker images -q)
	docker volume rm $(docker volume ls -qf dangling=true)
}

# Generate a random string
function randomstr() {
	cat /dev/urandom | env LC_CTYPE=C tr -dc a-z | head -c 16; echo
}

# Start an interactive Ubuntu Docker container with the present directory mounted
function ubuntuhere() {
	docker run -v $(pwd):/root/files -it ubuntu /bin/bash
}

# Build and run the Dockerfile at the current directory
function dockerhere() {
	TAG=$(randomstr)
	docker build -t $TAG . &&
	docker run -it -v $(pwd):/src $TAG &&
	docker rm $TAG
}

# Change to Terraform workspace and apply config
function tfapply() {
	terraform workspace select "$@" && terraform apply -var-file=workspaces/$@.tfvars
}

# Dedupe zsh history
function dedupHistory() {
	cp ~/.zsh_history{,-old}
	tmpFile=`mktemp`
	awk -F ";" '!seen[$2]++' ~/.zsh_history > $tmpFile
	mv $tmpFile ~/.zsh_history
}

# Turn WiFi off and on again to fix slow connections after sleep
function restartWifi() {
	networksetup -setairportpower airport off
	networksetup -setairportpower airport on
}

# List all Homebrew packages and the reasons they're installed
# https://www.thingy-ma-jig.co.uk/blog/22-09-2014/homebrew-list-packages-and-what-uses-them
function listHomebrew() {
	brew list -1 | while read cask; do echo -ne "\x1B[1;34m $cask \x1B[0m"; brew uses $cask --installed | awk '{printf(" %s ", $0)}'; echo ""; done
}

# List all Agents and Daemons
launchctlAll () {
	/usr/bin/sudo launchctl list; launchctl list
}

# Find launchctl Agents and Daemons
# https://stackoverflow.com/questions/18502705/how-to-know-a-specific-launchd-plist-file-location
launchctlFind () {
    LaunchctlPATHS=( \
        ~/Library/LaunchAgents \
        /Library/LaunchAgents \
        /Library/LaunchDaemons \
        /System/Library/LaunchAgents \
        /System/Library/LaunchDaemons \
    )

    for curPATH in "${LaunchctlPATHS[@]}"
    do
        grep -R "$curPATH" -e "$1"
    done
    return 0;
}

# Run Docker Compose file in local directory
compose () {
	function on_exit {
		docker-compose stop
		docker-compose kill
		docker-compose rm -vf
	}

	trap on_exit EXIT

	docker-compose kill
	docker-compose rm -vf
	docker-compose build
	docker-compose up --remove-orphans
}


# Send a command to a device and cat the output
send () {
	DEVICE=$1; shift
	BAUD=$1; shift

	cat $DEVICE &
	stty -f $DEVICE $BAUD

	echo -e "$@" > $DEVICE
	fg
}
