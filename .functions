# `a` with no arguments opens the current directory in VS Code Editor, otherwise
# opens the given location
function a() {
	if [ $# -eq 0 ]; then
		code .
	else
		code "$@"
	fi
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .
	else
		open "$@"
	fi
}

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_"
}

# Create a new bootstrapped application
function createapp() {
	git clone https://github.com/atkinchris/application-bootstrap.git "$@" && \
	cd "$_" && \
	rm -rf .git && \
	git init
}

# Clean Docker containers, images and volumes
function dockerclean() {
	# -a: remove all unused images not just dangling ones
	# -f: do not prompt for confirmation
	# --volumes: prune volumes
	docker system prune -af --volumes
}

# Generate a random string
function randomstr() {
	cat /dev/urandom | env LC_CTYPE=C tr -dc a-z | head -c 16; echo
}

# Start an interactive Docker container with the present directory mounted
function dkr() {
	docker run -v "$(pwd):/workdir" -w /workdir -it --rm $@
}

# Start an interactive Debian Docker container with the present directory mounted
function debianhere() {
	dkr debian /bin/bash
}

# Start an interactive Alpine Docker container with the present directory mounted
function alpinehere() {
	dkr alpine /bin/sh
}

# Build and run the Dockerfile at the current directory
function dockerhere() {
	local TAG=$(openssl rand -hex 12)
	DOCKER_CLI_HINTS=false docker build -qt $TAG . && dkr $TAG
}

# Change to Terraform workspace and apply config
function tfapply() {
	terraform workspace select "$@" && terraform apply -var-file=workspaces/$@.tfvars
}

# Dedupe zsh history
function dedupHistory() {
	cp ~/.zsh_history{,-old}
	local tmpFile=$(mktemp)
	awk -F ";" '!seen[$2]++' ~/.zsh_history > $tmpFile
	mv $tmpFile ~/.zsh_history
}

# Turn WiFi off and on again to fix slow connections after sleep
function restartWifi() {
	networksetup -setairportpower airport off
	networksetup -setairportpower airport on
}

# List all Homebrew packages and the reasons they're installed
# https://www.thingy-ma-jig.co.uk/blog/22-09-2014/homebrew-list-packages-and-what-uses-them
function listHomebrew() {
	brew list -1 | while read cask; do echo -ne "\x1B[1;34m $cask \x1B[0m"; brew uses $cask --installed | awk '{printf(" %s ", $0)}'; echo ""; done
}

# List all Agents and Daemons
function launchctlAll() {
	/usr/bin/sudo launchctl list; launchctl list
}

# Find launchctl Agents and Daemons
# https://stackoverflow.com/questions/18502705/how-to-know-a-specific-launchd-plist-file-location
function launchctlFind() {
    local LaunchctlPATHS=( \
        ~/Library/LaunchAgents \
        /Library/LaunchAgents \
        /Library/LaunchDaemons \
        /System/Library/LaunchAgents \
        /System/Library/LaunchDaemons \
    )

    for local curPATH in "${LaunchctlPATHS[@]}"
    do
        grep -R "$curPATH" -e "$1"
    done
    return 0;
}

# Run Docker Compose file in local directory
function compose() {
	function on_exit() {
		docker-compose stop
		docker-compose kill
		docker-compose rm -vf
	}

	trap on_exit EXIT

	docker-compose kill
	docker-compose rm -vf
	docker-compose build
  docker-compose up --remove-orphans $@
}

# Send a command to a device and cat the output
function send() {
	local DEVICE=$1; shift
	local BAUD=$1; shift

	cat $DEVICE &
	stty -f $DEVICE $BAUD

	echo -e "$@" > $DEVICE
	fg
}

# Tests for token validity
function test_github_scopes() {
	curl -sS -H "Authorization: token $1" https://api.github.com/user | jq -r .login
	curl -sS -f -I -H "Authorization: token $1" https://api.github.com | grep ^x-oauth-scopes: | cut -d' ' -f2- | tr -d "[:space:]"
}

# Mirror and bundle a GitHub repository
function bundle_github() {
	local url=$1
	local output=$2
	local repo_dir=$(basename $url)

  git clone --mirror $url || return 1
  cd "$repo_dir" || return 1
  git bundle create "../$output.bundle" --all || { cd ..; rm -rf "$repo_dir"; return 1; }
  cd .. || return 1 # Should generally succeed, but good practice
  rm -rf "$repo_dir"
}

# Encrypt stdin for a GitHub user or decrypt for self with age
# https://github.com/FiloSottile/age
function github_crypt() {
	if [ -z "$1" ]
	then
		age -d -i <(op read op://Private/GitHub/'private key')
	else
		age -a -R <(curl -sS https://github.com/$1.keys)
	fi
}

# Run a Python script with UV
# https://github.com/astral-sh/uv/issues/8432#issuecomment-2449749852
function py() {
  uv run $1
}

# Archive a GitHub repository
# $ gh_archive sainsburys-tech discoverability-org-viz
function gh_archive() {
  local org=$1
  local repo=$2
  gh repo archive -y $org/$repo
}

# Delete a GitHub repository
# $ gh_delete sainsburys-tech jp-pd
function gh_delete() {
  local org=$1
  local repo=$2
  gh repo delete --yes $org/$repo
}

# Add a team to a GitHub repository
# $ gh_add_team JSainsburyPLC cvu-argos-similar-products-aspire gdp-orange-admin admin
function gh_add_team() {
  local org=$1
	local repo=$2
	local team_slug=$3
  local permission=$4

  gh api \
    --method PUT \
    "/orgs/$org/teams/$team_slug/repos/$org/$repo" \
    -f permission="$permission"
}

# Add a collaborator to a GitHub repository
# $ gh_add_collaborator JSainsburyPLC tu-bastion-infra evaj03 admin
function gh_add_collaborator() {
  local org=$1
  local repo=$2
  local collaborator=$3
  local permission=$4

  gh api \
    --method PUT \
    "/repos/$org/$repo/collaborators/$collaborator" \
    -f permission="$permission"
}

# Remove a user from a GitHub enterprise
# $ gh_remove_user j-sainsbury-plc evaj03
function gh_remove_user() {
  local enterprise=$1
  local user=$2

  # Get the user ID
  local user_id=$(gh api graphql -f query='query($login: String!) { user(login:$login) { id } }' -F login=$user | jq -r '.data.user.id')

  # Get the enterprise ID
  local enterprise_id=$(gh api graphql -f query='query($slug: String!) { enterprise(slug: $slug) { id } }' -F slug=$enterprise | jq -r '.data.enterprise.id')

  gh api graphql \
    -F enterprise=$enterprise_id \
    -F user=$user_id \
    -f query='
mutation($enterprise:ID!, $user:ID!) {
  removeEnterpriseMember(
    input: {enterpriseId: $enterprise, userId: $user}
  ) {
    clientMutationId
  }
}
'
}

# App a repo to a GitHub app installation
# $ gh_app_add 1234567890 JSainsburyPLC tu-bastion-infra
function gh_app_add() {
  local installationId=$1
  local org=$2
  local repo=$3

  local repoId=$(gh api /repos/$org/$repo | jq -r .id)

  echo "Adding $repo to $org with installationId $installationId and repoId $repoId"

  gh api -X PUT /user/installations/$installationId/repositories/$repoId
}
